{"version":3,"sources":["webpack://appointment-searcher-client/./src/api/Search.ts","webpack://appointment-searcher-client/./src/api/fetchHelper.ts","webpack://appointment-searcher-client/./src/app/components/App.tsx","webpack://appointment-searcher-client/./src/app/components/ErrorDialog.tsx","webpack://appointment-searcher-client/./src/app/pages/HomePage.tsx","webpack://appointment-searcher-client/./src/app/pages/search/SearchCard.tsx","webpack://appointment-searcher-client/./src/app/pages/search/SearchPage.tsx","webpack://appointment-searcher-client/./src/app/pages/search/SearchSettings.tsx","webpack://appointment-searcher-client/./src/app/stores/error.ts","webpack://appointment-searcher-client/./src/app/stores/index.ts","webpack://appointment-searcher-client/./src/app/stores/search.ts","webpack://appointment-searcher-client/./src/app/stores/storeProvider.ts","webpack://appointment-searcher-client/./src/index.tsx","webpack://appointment-searcher-client/./src/provider.tsx","webpack://appointment-searcher-client/./src/utils/bind.ts","webpack://appointment-searcher-client/./src/utils/index.ts","webpack://appointment-searcher-client/./src/utils/sleep.ts","webpack://appointment-searcher-client/webpack/bootstrap","webpack://appointment-searcher-client/webpack/runtime/compat get default export","webpack://appointment-searcher-client/webpack/runtime/define property getters","webpack://appointment-searcher-client/webpack/runtime/global","webpack://appointment-searcher-client/webpack/runtime/hasOwnProperty shorthand","webpack://appointment-searcher-client/webpack/runtime/make namespace object","webpack://appointment-searcher-client/webpack/runtime/jsonp chunk loading","webpack://appointment-searcher-client/webpack/startup"],"names":["fetchHelper","method","headers","searchEndpoint","body","JSON","stringify","FetchResponse","statusCode","message","this","url","options","fetch","then","response","restResponse","status","statusText","text","parse","e","error","AppComponent","React","Component","location","props","Menu","fixed","inverted","color","style","padding","Grid","Row","Column","Switch","Route","exact","path","component","HomePage","SearchPage","Redirect","from","pathname","to","children","ErrorDialog","inject","observer","errorStore","Modal","size","open","shouldShow","Header","settings","title","Content","Form","Field","Actions","Button","onClick","dismiss","bind","Message","onGetStarted","history","push","SearchCard","Card","header","name","Segment","clearing","textAlign","description","Divider","openSlots","length","Item","Group","divided","info","createOpenSlotSegments","floated","onPauseButton","active","searching","extra","Icon","searchResponseMessage","map","openSlot","date","time","Description","dose","Extra","onGoToPageButton","window","endpoint","searchStore","activeState","setEndpointActiveState","id","startSearch","getSearchEndpoints","activeSearches","searchEndpoints","selected","key","Dimmer","Dimmable","loading","Loader","SearchSettings","itemsPerRow","searchEndpointCheckboxes","Checkbox","label","checked","getEndpointSelectedState","onChange","onSearchEndpointChecked","attached","as","setEndpointSelectedState","target","stopSearch","ErrorStore","observable","internalShouldShow","value","runInAction","fetchResponse","storeProvider","on","StoreEvents","Error","onError","displayName","SearchStore","createStoreProvider","initialSearchResponseMessage","alertSound","Audio","array","_emitter","EventEmitter2","succeeded","getSearchEndpointsApi","searchEndpointResults","replace","searchCount","emitError","find","setTimeout","searchAppointments","play","sleep","postSearchAppointmentsApi","searchResponse","emitter","emit","StoreCollection","Stores","default","StoresImports","super","_stores","Store","store","initialize","onAny","onStoreEvent","event","listener","values","configure","enforceActions","appProvider","stores","ReactDOM","render","AppContainer","document","getElementById","console","log","start","Provider","BrowserRouter","propertyKey","descriptor","TypeError","configurable","bound","Object","defineProperty","writable","milliseconds","Promise","resolve","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call","m","x","n","getter","__esModule","d","a","definition","o","enumerable","get","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","r","Symbol","toStringTag","installedChunks","826","deferredModules","checkDeferredModules","webpackJsonpCallback","parentChunkLoadingFunction","data","chunkId","chunkIds","moreModules","runtime","executeModules","i","resolves","shift","apply","chunkLoadingGlobal","self","checkDeferredModulesImpl","result","deferredModule","fulfilled","j","depId","splice","s","forEach","startup"],"mappings":"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","file":"index.js","sourcesContent":["import { FetchResponse, fetchHelper } from './fetchHelper';\n\nexport function getSearchEndpointsApi(): Promise<FetchResponse> {\n    return fetchHelper(`/api/v1/search/endpoints`,\n        {\n            method: 'GET',\n            // credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        });\n}\n\nexport function postSearchAppointmentsApi(searchEndpoint: any): Promise<FetchResponse> {\n    return fetchHelper(`/api/v1/search/appointment`,\n        {\n            method: 'POST',\n            // credentials: 'include',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: JSON.stringify(searchEndpoint)\n        });\n}\n","import 'whatwg-fetch';\n\nexport class FetchResponse {\n    public statusCode: number;\n    public message: string;\n    public body: any;\n    public get succeeded() {\n        return (this.statusCode >= 200 && this.statusCode < 300);\n    }\n\n    constructor(statusCode: number, message: string) {\n        this.statusCode = statusCode;\n        this.message = message;\n    }\n}\n\nexport async function fetchHelper(url, options): Promise<FetchResponse> {\n    return fetch(url, options)\n        .then(response => {\n            const restResponse = new FetchResponse(response.status, response.statusText);\n\n            if (response.status !== 204 && response.status !== 205) {\n                return response.text()\n                    .then(text => {\n                        try {\n                            restResponse.body = JSON.parse(text);\n                        } catch (e) {\n                            restResponse.body = text;\n                        }\n\n                        return restResponse;\n                    });\n            }\n\n            return restResponse;\n        }, error => {\n            throw error;\n        });\n}\n","import * as React from 'react';\nimport { Menu, Grid } from 'semantic-ui-react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { observer, inject } from 'mobx-react';\nimport { SearchStore } from '../stores';\nimport { ErrorDialog } from './ErrorDialog';\nimport { HomePage } from '../pages/HomePage';\nimport { SearchPage } from '../pages/search/SearchPage';\n\ninterface IAppProps {\n    searchStore: SearchStore;\n    location: any;\n}\n\n@inject('searchStore') @observer\nexport class AppComponent extends React.Component<IAppProps, {}> {\n    public render() {\n        const {\n            location\n        } = this.props;\n\n        return (\n            <div>\n                <Menu fixed=\"top\" inverted color={'grey'} style={{ padding: '0em 5em' }} />\n                <Grid style={{ padding: '5em 5em' }}>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Switch>\n                                <Route exact path=\"/\" component={HomePage} />\n                                <Route path=\"/search\" component={SearchPage} />\n                                <Redirect from={location.pathname} to=\"/\" />\n                                {this.props.children}\n                            </Switch>\n                            <ErrorDialog />\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                <Menu fixed=\"bottom\" inverted color={'grey'} style={{ padding: '1em 5em' }} />\n            </div >\n        );\n    }\n}\n","import * as React from 'react';\nimport { Button, Modal, Form } from 'semantic-ui-react';\nimport { ErrorStore } from '../stores';\nimport { observer, inject } from 'mobx-react';\nimport { bind } from '../../utils';\n\ninterface IErrorDialogProps {\n    errorStore?: ErrorStore;\n}\n\n@inject('errorStore') @observer\nexport class ErrorDialog extends React.Component<IErrorDialogProps, any> {\n    public render() {\n        const {\n            errorStore\n        } = this.props;\n\n        return (\n            <Modal size={'mini'} open={errorStore.shouldShow}>\n                <Modal.Header>{errorStore.settings.title}</Modal.Header>\n                <Modal.Content>\n                    <Form>\n                        <Form.Field>\n                            <label>{errorStore.settings.message}</label>\n                        </Form.Field>\n                    </Form>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={this.dismiss}>Close</Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n\n    @bind\n    private dismiss() {\n        this.props.errorStore.shouldShow = false;\n    }\n}\n","import * as React from 'react';\nimport { Grid, Message, Button } from 'semantic-ui-react';\nimport { bind } from '../../utils';\n\ninterface IHomePageProps {\n    history: any;\n}\n\nexport class HomePage extends React.Component<IHomePageProps, any> {\n    public render() {\n        return (\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column>\n                        <Message>\n                            <h2>Appointment Searcher Client</h2>\n                            <p>Welcome</p>\n                        </Message>\n                        <Button size={'tiny'} color={'blue'} onClick={this.onGetStarted}>Get Started</Button>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        );\n    }\n\n    @bind\n    // @ts-ignore (e)\n    private onGetStarted(e: any) {\n        const {\n            history\n        } = this.props;\n\n        history.push('/search');\n    }\n}\n","import * as React from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { ISearchEndpointStatus, SearchStore } from '../../stores/search';\nimport { Segment, Divider, Item, Card, Icon, Button, Message } from 'semantic-ui-react';\nimport { bind } from '../../../utils';\n\ninterface ISearchCardProps {\n    searchStore: SearchStore,\n    searchEndpoint: ISearchEndpointStatus;\n}\n\n@inject('searchStore') @observer\nexport class SearchCard extends React.Component<ISearchCardProps, any> {\n    public render() {\n        const {\n            searchEndpoint\n        } = this.props;\n\n        return (\n            <Card>\n                <Card.Content header={searchEndpoint.name} />\n                <Card.Content>\n                    <Segment clearing color={'blue'} textAlign='left'>\n                        {searchEndpoint.description}\n                        <Divider clearing />\n                        {\n                            searchEndpoint.openSlots.length > 0\n                                ? (\n                                    <Item.Group divided>\n                                        <Message size={'tiny'} color={'green'} info>\n                                            <Message.Header>{`${searchEndpoint.openSlots.length} appointments found`}</Message.Header>\n                                        </Message>\n                                        { this.createOpenSlotSegments()}\n                                        <Button size={'tiny'} floated=\"right\" color={'blue'} onClick={this.onPauseButton}>{searchEndpoint.active ? 'Pause' : 'Resume'}</Button>\n                                    </Item.Group>\n                                )\n                                : (\n                                    <div>\n                                        <Message size={'tiny'} color={searchEndpoint.searching ? 'yellow' : 'blue'} info>\n                                            <Message.Header>{searchEndpoint.searching ? 'Retrieving appointment data...' : 'No appointments found'}</Message.Header>\n                                        </Message>\n                                        <Button size={'tiny'} floated=\"right\" color={'blue'} onClick={this.onPauseButton}>{searchEndpoint.active ? 'Pause' : 'Resume'}</Button>\n                                    </div>\n                                )\n\n                        }\n\n                    </Segment>\n                </Card.Content>\n                <Card.Content extra>\n                    <Icon name='calendar check' />\n                    {searchEndpoint.searchResponseMessage}\n                </Card.Content>\n            </Card>\n        );\n    }\n\n    // @ts-ignore\n    private createOpenSlotSegments() {\n        const {\n            searchEndpoint\n        } = this.props;\n\n        return searchEndpoint.openSlots.map((openSlot) => {\n            return (\n                <Item>\n                    <Item.Content>\n                        <Item.Header>{openSlot.date} {openSlot.time}</Item.Header>\n                        <Item.Description>{`${openSlot.dose} Available`}</Item.Description>\n                        <Item.Extra>\n                            <Button size={'tiny'} floated=\"right\" color={'green'} onClick={this.onGoToPageButton}>Open...</Button>\n                        </Item.Extra>\n                    </Item.Content>\n                </Item>\n            )\n        });\n    }\n\n    @bind\n    // @ts-ignore\n    private onGoToPageButton(e: any) {\n        const {\n            searchEndpoint\n        } = this.props;\n\n        window.open(searchEndpoint.endpoint, '_blank');\n    }\n\n    @bind\n    // @ts-ignore (e)\n    private onPauseButton(e: any) {\n        const {\n            searchStore,\n            searchEndpoint\n        } = this.props;\n\n        const activeState = searchEndpoint.active;\n\n        searchStore.setEndpointActiveState(searchEndpoint.id, !activeState);\n\n        if (!activeState) {\n            searchStore.startSearch(searchEndpoint.id);\n        }\n    }\n}\n","import * as React from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { Grid, Dimmer, Loader, Message, Card } from 'semantic-ui-react';\nimport { SearchStore } from '../../stores';\nimport { SearchSettings } from './SearchSettings';\nimport { SearchCard } from './SearchCard';\n\ninterface ISearchPageProps {\n    searchStore: SearchStore;\n    history: any;\n}\n\n@inject('searchStore') @observer\nexport class SearchPage extends React.Component<ISearchPageProps, any> {\n    public componentDidMount() {\n        const {\n            searchStore\n        } = this.props;\n\n        searchStore.getSearchEndpoints();\n    }\n\n    public render() {\n        const {\n            searchStore\n        } = this.props;\n\n        const activeSearches = searchStore.searchEndpoints.map((endpoint) => {\n            if (endpoint.selected) {\n                return (\n                    <SearchCard\n                        key={endpoint.id}\n                        searchStore={searchStore}\n                        searchEndpoint={endpoint}\n                    />\n                );\n            }\n        });\n\n        return (\n            <Dimmer.Dimmable>\n                <Dimmer active={searchStore.settings.loading} inverted>\n                    <Loader>Loading</Loader>\n                </Dimmer>\n                <Grid>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Message size={'large'} info>\n                                <Message.Header>{`Appointment Search Client`}</Message.Header>\n                            </Message>\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <SearchSettings\n                                searchStore={searchStore}\n                            />\n                        </Grid.Column>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <Grid.Column>\n                            <Card.Group itemsPerRow={2}>\n                                {activeSearches}\n                            </Card.Group>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid >\n            </Dimmer.Dimmable>\n        );\n    }\n}\n","import * as React from 'react';\nimport { observer, inject } from 'mobx-react';\nimport { SearchStore } from '../../stores/search';\nimport { Segment, Header, Form, Checkbox } from 'semantic-ui-react';\nimport { bind } from '../../../utils';\n\ninterface ISearchSettingsProps {\n    searchStore: SearchStore;\n}\n\n@inject('searchStore') @observer\nexport class SearchSettings extends React.Component<ISearchSettingsProps, any> {\n    public render() {\n        const {\n            searchStore\n        } = this.props;\n\n        const searchEndpointCheckboxes = searchStore.searchEndpoints.map((endpoint) => {\n            return (\n                <Form.Field key={endpoint.id}>\n                    <Checkbox\n                        id={endpoint.id}\n                        label={endpoint.name}\n                        checked={searchStore.getEndpointSelectedState(endpoint.id)}\n                        onChange={this.onSearchEndpointChecked}\n                    />\n                </Form.Field>\n            );\n        });\n\n        return (\n            <div>\n                <Header attached=\"top\" as=\"h3\" color={'blue'}>Search Settings</Header>\n                <Segment attached=\"bottom\">\n                    <Form>\n                        <Form.Field>\n                            Select clinic dates to search:\n                        </Form.Field>\n                        {searchEndpointCheckboxes}\n                    </Form>\n                </Segment>\n            </div>\n        );\n    }\n\n    @bind\n    // @ts-ignore (e)\n    private async onSearchEndpointChecked(e: any) {\n        const {\n            searchStore\n        } = this.props;\n\n        await searchStore.setEndpointSelectedState(e.target.id, e.target.checked);\n\n        e.target.checked\n            ? searchStore.startSearch(e.target.id)\n            : searchStore.stopSearch(e.target.id);\n    }\n}\n","import { observable, runInAction } from 'mobx';\nimport { FetchResponse } from '../../api/fetchHelper';\nimport { StoreProvider, StoreEvents, DataStore } from '.';\nimport { bind } from '../../utils';\n\nexport class ErrorStore implements DataStore {\n    public static displayName = 'errorStore';\n\n    public settings = observable({\n        internalShouldShow: false,\n        title: 'Error',\n        message: ''\n    })\n\n    public get shouldShow() {\n        return this.settings.internalShouldShow;\n    }\n\n    public set shouldShow(value) {\n        runInAction(() => {\n            this.settings.internalShouldShow = value;\n        });\n    }\n\n    public showFetchError(fetchResponse: FetchResponse) {\n        runInAction(() => {\n            this.settings.internalShouldShow = true;\n            this.settings.message = `HTTP error code ${fetchResponse.statusCode}: ${fetchResponse.message}`;\n        });\n    }\n\n    public showExceptionError(error: Error) {\n        runInAction(() => {\n            this.settings.internalShouldShow = true;\n            this.settings.message = `Unexpected error: ${error.message}`;\n        });\n    }\n\n    public showError(title: string, message: string) {\n        runInAction(() => {\n            this.settings.internalShouldShow = true;\n            this.settings.title = title;\n            this.settings.message = message;\n        });\n    }\n\n    public initialize(storeProvider: StoreProvider) {\n        storeProvider.on(StoreEvents.Error, this.onError);\n    }\n\n    @bind\n    // @ts-ignore (message)\n    private onError(message: string) {\n        return;\n    }\n}\n","import { ErrorStore } from './error';\nimport { SearchStore } from './search';\nimport { DataStore, StoreEvents, StoreProvider, createStoreProvider } from './storeProvider';\n\nexport {\n    ErrorStore,\n    SearchStore,\n    DataStore,\n    StoreEvents,\n    StoreProvider,\n    createStoreProvider\n};\n\nexport default [\n    ErrorStore,\n    SearchStore\n];\nSearchStore","import { observable, runInAction } from 'mobx';\nimport { DataStore, StoreEvents } from '.';\nimport { EventEmitter2 } from 'eventemitter2';\nimport { getSearchEndpointsApi, postSearchAppointmentsApi } from '../../api/Search';\nimport { bind, sleep } from '../../utils';\n\nexport interface ISearchEndpoint {\n    id: string;\n    name: string;\n    description: string;\n    endpoint: string;\n}\n\nexport interface IOpenSlot {\n    date: string;\n    time: string;\n    dose: string;\n}\n\nexport interface ISearchResponse {\n    status: boolean;\n    id: string;\n    name: string;\n    description: string;\n    openSlots: IOpenSlot[];\n}\n\nexport interface ISearchEndpointStatus {\n    id: string;\n    name: string;\n    description: string;\n    endpoint: string;\n    selected: boolean;\n    active: boolean;\n    searching: boolean;\n    openSlots: IOpenSlot[];\n    searchResponseMessage: string;\n    searchCount: number;\n}\n\nconst initialSearchResponseMessage = '0 scans for appointments completed';\n\nexport class SearchStore implements DataStore {\n    public static displayName = 'searchStore';\n\n    private alertSound = new Audio('/assets/alert.mp3');\n\n    public settings = observable({\n        loading: false\n    });\n\n    public searchEndpoints = observable.array([] as ISearchEndpointStatus[]);\n\n    // public async init() {\n    //     autorun(() => {\n    //         for (const foo of this.searchEndpoints) {\n    //             console.log(`Checkbox ${foo.id}: ${foo.active ? 'ON' : 'OFF'}`);\n    //         }\n    //     });\n    // }\n\n    public get isProduction() {\n        return process.env.NODE_ENV === 'production';\n    }\n\n    private _emitter = new EventEmitter2();\n\n    public get emitter() {\n        return this._emitter;\n    }\n\n    public async getSearchEndpoints() {\n        let succeeded = false;\n\n        runInAction(() => {\n            this.settings.loading = true;\n        });\n\n        try {\n            const response = await getSearchEndpointsApi();\n            if (response.succeeded) {\n                runInAction(() => {\n                    const searchEndpointResults = (response.body as ISearchEndpoint[]);\n\n                    this.searchEndpoints.replace(searchEndpointResults.map((endpoint) => {\n                        return {\n                            id: endpoint.id,\n                            name: endpoint.name,\n                            description: endpoint.description,\n                            endpoint: endpoint.endpoint,\n                            selected: false,\n                            active: false,\n                            searching: false,\n                            openSlots: [],\n                            searchResponseMessage: initialSearchResponseMessage,\n                            searchCount: 0\n                        }\n                    }));\n                });\n            }\n            else {\n                this.emitError(response);\n            }\n\n            succeeded = response.succeeded;\n        }\n        catch (error) {\n            this.emitError(error);\n        }\n\n        runInAction(() => {\n            this.settings.loading = false;\n        });\n\n        return succeeded;\n    }\n\n    public startSearch(id: string): void {\n        const endpoint = this.searchEndpoints.find(endpoint => endpoint.id === id)\n        if (!endpoint) {\n            return;\n        }\n\n        runInAction(() => {\n            endpoint.active = true;\n        });\n\n        setTimeout(this.searchEndpoint, 1000, id);\n    }\n\n    public stopSearch(id: string): void {\n        const endpoint = this.searchEndpoints.find(endpoint => endpoint.id === id)\n        if (!endpoint) {\n            return;\n        }\n\n        runInAction(() => {\n            endpoint.active = false;\n            endpoint.openSlots = [];\n            endpoint.searchResponseMessage = initialSearchResponseMessage;\n            endpoint.searchCount = 0;\n        });\n    }\n\n    @bind\n    public async searchEndpoint(id: string): Promise<void> {\n        const endpoint = this.searchEndpoints.find(endpoint => endpoint.id === id)\n        if (!endpoint) {\n            return;\n        }\n\n        await this.searchAppointments(id);\n\n        if (endpoint.openSlots.length > 0) {\n            this.alertSound.play();\n\n            this.setEndpointActiveState(id, false);\n        }\n\n        await sleep(1000);\n\n        if (endpoint.active) {\n            setTimeout(this.searchEndpoint, 10, id);\n        }\n    }\n\n    public getEndpointSelectedState(id: string): boolean {\n        const endpoint = this.searchEndpoints.find(endpoint => endpoint.id === id)\n\n        return !!endpoint?.selected;\n    }\n\n    public async setEndpointSelectedState(id: string, selected: boolean): Promise<void> {\n        runInAction(() => {\n            const endpoint = this.searchEndpoints.find(endpoint => endpoint.id === id)\n            if (endpoint) {\n                endpoint.selected = selected;\n            }\n        });\n    }\n\n    public async setEndpointActiveState(id: string, active: boolean): Promise<void> {\n        runInAction(() => {\n            const endpoint = this.searchEndpoints.find(endpoint => endpoint.id === id)\n            if (endpoint) {\n                endpoint.active = active;\n            }\n        });\n    }\n\n    public async playAlertSound(): Promise<void> {\n        await this.alertSound.play();\n    }\n\n    private async searchAppointments(id: string): Promise<boolean> {\n        let succeeded = false;\n\n        const searchEndpoint = this.searchEndpoints.find(endpoint => endpoint.id === id);\n        if (!searchEndpoint) {\n            return false;\n        }\n\n        runInAction(() => {\n            searchEndpoint.searching = true;\n        });\n\n        try {\n            const response = await postSearchAppointmentsApi({\n                id\n            });\n\n            if (response.succeeded && response.body?.status) {\n                runInAction(() => {\n                    const searchResponse = (response.body as ISearchResponse);\n\n                    searchEndpoint.openSlots = searchResponse.openSlots;\n                    searchEndpoint.searchResponseMessage = `${++searchEndpoint.searchCount} scans for appointments completed`;\n                });\n            }\n            else {\n                // this.emitError(response);\n                runInAction(() => {\n                    searchEndpoint.searchResponseMessage = 'Error while requesting appointments';\n                });\n            }\n\n            succeeded = response.succeeded;\n        }\n        catch (error) {\n            this.emitError(error);\n        }\n\n        runInAction(() => {\n            searchEndpoint.searching = false;\n        });\n\n        return succeeded;\n    }\n\n    private emitError(error) {\n        this.emitter.emit(StoreEvents.Error, JSON.stringify(error, null, 2));\n    }\n}\n","import { EventEmitter2, Listener } from 'eventemitter2';\nimport { bind } from '../../utils';\nimport * as Stores from '.';\n\nexport interface DataStore {\n    initialize?: (storeProvider: StoreProvider) => void;\n    emitter?: EventEmitter2;\n}\n\nexport enum StoreEvents {\n    Error = 'Error',\n    Busy = 'Busy'\n}\n\nexport interface StoreProvider extends EventEmitter2 {\n    [key: string]: any;\n    stores: any;\n}\n\nexport function createStoreProvider(): StoreProvider {\n    return new StoreCollection(Stores.default);\n}\n\nclass StoreCollection extends EventEmitter2 implements StoreProvider {\n    private _stores: any = {};\n\n    constructor(StoresImports: any) {\n        super();\n\n        for (const Store of StoresImports) {\n            const store = new Store();\n            this[Store.displayName] = store;\n            this._stores[Store.displayName] = store;\n            if (store.initialize) {\n                store.initialize(this);\n            }\n            if (store.emitter) {\n                store.emitter.onAny(this.onStoreEvent);\n            }\n        }\n    }\n\n    public get stores() {\n        return this._stores;\n    }\n\n    public on(event: string | string[], listener: Listener): this {\n        // const events: string[] = (typeof event === 'string') ? [event] : event;\n\n        // const validMesssages = Object.keys(StoreEvents);\n        // for (const eventName of events) {\n        //     if (!validMesssages.includes(eventName)) {\n        //         throw new Error('Invalid event name');\n        //     }\n        // }\n\n        return super.on(event, listener);\n    }\n\n    @bind\n    private onStoreEvent(event: string, ...values: any[]) {\n        this.emit(event, ...values);\n    }\n}\n","import 'babel-polyfill';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nimport { appProvider } from './provider';\nimport { configure } from 'mobx';\nimport { createStoreProvider } from './app/stores';\n\n// Don't allow MobX state mutation without a MobX action\nconfigure({\n    enforceActions: 'observed'\n});\n\n// tslint:disable-next-line:variable-name\nconst render = (Component) => {\n    ReactDOM.render(\n        <AppContainer>\n            <Component />\n        </AppContainer>,\n        document.getElementById('app')\n    );\n};\n\nasync function start() {\n    try {\n        const storeProvider = createStoreProvider();\n\n        render(appProvider.bind(null, { storeProvider, ...storeProvider.stores }));\n\n        if (module.hot) {\n            module.hot.accept('./provider', () => {\n                render(appProvider.bind(null, { storeProvider }));\n            });\n        }\n    }\n    catch (error) {\n        // tslint:disable-next-line:no-console\n        console.log(`['startup', 'error'], 👹 Error starting react client: ${error.message}`);\n    }\n}\n\nstart();\n","import * as React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Provider } from 'mobx-react';\nimport { AppComponent } from './app/components/App';\n\n// This provider needs to be imported from a separate file to enable hot loading\nexport const appProvider = (stores) => {\n    return (\n        <Provider {...stores}>\n            <BrowserRouter>\n                <Route path=\"/:filter?\" component={AppComponent} />\n            </BrowserRouter>\n        </Provider>\n    );\n};\n","// tslint:disable-next-line:ban-types\n// @ts-ignore (e)\nexport function bind<T extends Function>(target: object, propertyKey: string,\n    descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (!descriptor || (typeof descriptor.value !== 'function')) {\n        throw new TypeError(`Only methods can be decorated with @bind. <${propertyKey}> is not a method!`);\n    }\n\n    return {\n        configurable: true,\n        get(this: T): T {\n            const bound: T = descriptor.value!.bind(this);\n            Object.defineProperty(this, propertyKey, {\n                value: bound,\n                configurable: true,\n                writable: true\n            });\n            return bound;\n        }\n    };\n}\n","import { bind } from './bind';\nimport { sleep } from './sleep';\n\nexport {\n    bind,\n    sleep\n};\n","export function sleep(milliseconds: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            return resolve();\n        }, milliseconds);\n    });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n// It's empty as some runtime module handles the default behavior\n__webpack_require__.x = x => {};\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// Promise = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t826: 0\n};\n\nvar deferredModules = [\n\t[2629,736]\n];\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\nvar checkDeferredModules = x => {};\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime, executeModules] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0, resolves = [];\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tresolves.push(installedChunks[chunkId][0]);\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\tfor(moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\twhile(resolves.length) {\n\t\tresolves.shift()();\n\t}\n\n\t// add entry modules from loaded chunk to deferred list\n\tif(executeModules) deferredModules.push.apply(deferredModules, executeModules);\n\n\t// run deferred modules when all chunks ready\n\treturn checkDeferredModules();\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkappointment_searcher_client\"] = self[\"webpackChunkappointment_searcher_client\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n\nfunction checkDeferredModulesImpl() {\n\tvar result;\n\tfor(var i = 0; i < deferredModules.length; i++) {\n\t\tvar deferredModule = deferredModules[i];\n\t\tvar fulfilled = true;\n\t\tfor(var j = 1; j < deferredModule.length; j++) {\n\t\t\tvar depId = deferredModule[j];\n\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferredModules.splice(i--, 1);\n\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n\t\t}\n\t}\n\tif(deferredModules.length === 0) {\n\t\t__webpack_require__.x();\n\t\t__webpack_require__.x = x => {};\n\t}\n\treturn result;\n}\nvar startup = __webpack_require__.x;\n__webpack_require__.x = () => {\n\t// reset startup function so it can be called again when more startup code is added\n\t__webpack_require__.x = startup || (x => {});\n\treturn (checkDeferredModules = checkDeferredModulesImpl)();\n};","// run startup\n__webpack_require__.x();\n"],"sourceRoot":""}